//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Data.EntityClient;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;

[assembly: EdmSchemaAttribute()]

namespace Sonneville.PriceTools
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class Container : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new Container object using the connection string found in the 'Container' section of the application configuration file.
        /// </summary>
        public Container() : base("name=Container", "Container")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new Container object.
        /// </summary>
        public Container(string connectionString) : base(connectionString, "Container")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new Container object.
        /// </summary>
        public Container(EntityConnection connection) : base(connection, "Container")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Transaction> Transactions
        {
            get
            {
                if ((_Transactions == null))
                {
                    _Transactions = base.CreateObjectSet<Transaction>("Transactions");
                }
                return _Transactions;
            }
        }
        private ObjectSet<Transaction> _Transactions;

        #endregion
        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Transactions EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToTransactions(Transaction transaction)
        {
            base.AddObject("Transactions", transaction);
        }

        #endregion
    }
    

    #endregion
    
    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Entities", Name="CashTransaction")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    [KnownTypeAttribute(typeof(Deposit))]
    [KnownTypeAttribute(typeof(Withdrawal))]
    public abstract partial class CashTransaction : Transaction
    {
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Decimal Amount
        {
            get
            {
                return _Amount;
            }
            set
            {
                OnAmountChanging(value);
                ReportPropertyChanging("Amount");
                _Amount = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Amount");
                OnAmountChanged();
            }
        }
        private global::System.Decimal _Amount;
        partial void OnAmountChanging(global::System.Decimal value);
        partial void OnAmountChanged();

        #endregion
    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Entities", Name="Deposit")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Deposit : CashTransaction
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Deposit object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="settlementDate">Initial value of the SettlementDate property.</param>
        /// <param name="amount">Initial value of the Amount property.</param>
        public static Deposit CreateDeposit(global::System.Int32 id, global::System.DateTime settlementDate, global::System.Decimal amount)
        {
            Deposit deposit = new Deposit();
            deposit.Id = id;
            deposit.SettlementDate = settlementDate;
            deposit.Amount = amount;
            return deposit;
        }

        #endregion
    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Entities", Name="Transaction")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    [KnownTypeAttribute(typeof(CashTransaction))]
    public abstract partial class Transaction : EntityObject
    {
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime SettlementDate
        {
            get
            {
                return _SettlementDate;
            }
            set
            {
                OnSettlementDateChanging(value);
                ReportPropertyChanging("SettlementDate");
                _SettlementDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("SettlementDate");
                OnSettlementDateChanged();
            }
        }
        private global::System.DateTime _SettlementDate;
        partial void OnSettlementDateChanging(global::System.DateTime value);
        partial void OnSettlementDateChanged();

        #endregion
    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Entities", Name="Withdrawal")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Withdrawal : CashTransaction
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Withdrawal object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="settlementDate">Initial value of the SettlementDate property.</param>
        /// <param name="amount">Initial value of the Amount property.</param>
        public static Withdrawal CreateWithdrawal(global::System.Int32 id, global::System.DateTime settlementDate, global::System.Decimal amount)
        {
            Withdrawal withdrawal = new Withdrawal();
            withdrawal.Id = id;
            withdrawal.SettlementDate = settlementDate;
            withdrawal.Amount = amount;
            return withdrawal;
        }

        #endregion
    
    }

    #endregion
    
}
